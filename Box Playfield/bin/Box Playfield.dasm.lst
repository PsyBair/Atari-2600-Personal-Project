------- FILE Box Playfield.dasm LEVEL 1 PASS 2
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE Box Playfield.dasm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE Box Playfield.dasm
      4  0000 ????
      5  0000 ????	       00 f0	   BORDERCOLOR equ	#$F0
      6  0000 ????	       00 07	   BORDERHEIGHT equ	#7	; How many scan lines are our top and bottom borders
      7  0000 ????	       00 32	   BACKGROUNDCOLOR equ	#$32
      8  0000 ????
      9  0000 ????	       00 21	   MIN_HPOS   equ	#33	; Might not need this???
     10  0000 ????						;P0HEIGHT equ #8	      ; The vertical length of the sprite in this example
     11  0000 ????	       00 c0	   MAX_VPOS   equ	#192	; The last scanline
     12  0000 ????	       00 0e	   COLP0      equ	#$0E	; player 0 sprite colour (white)
     13  0000 ????
     14 U00a2 ????				      seg.u	vars	; uninitialized segment
     15 U0080					      org	$80
     16 U0080
     17 U0080		       00 00 00 00*player0_x  ds	#MIN_HPOS	; byte variable to hold our horizontal position
     18 U00a1				   p0_y       ds		; byte
     19 U00a1		       00	   SpriteXPosition ds	1
     20 U00a2
     21 U00a2							; ------------------------- Start of main segment ---------------------------------
     22 U00a2
     23  10000 ????				       seg	main
     24  f000					      org	$F000
     25  f000
     26  f000							; ------------------------- Start of program execution ----------------------------
     27  f000
      0  f000				   reset      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     29  f00a
     30  f00a		       a9 01		      lda	#%00000001	; (2) Set D0 to reflect the playfield
     31  f00c		       85 0a		      sta	CTRLPF	; (3) Apply to the CTRLPF register
     32  f00e
     33  f00e		       a9 f0		      lda	#BORDERCOLOR	; (2)	
     34  f010		       85 08		      sta	COLUPF	; (3) Set the playfield color
     35  f012
     36  f012		       a9 32		      lda	#BACKGROUNDCOLOR	;(2)
     37  f014		       85 09		      sta	COLUBK	;(3)
     38  f016
     39  f016		       a9 0e		      lda	#COLP0	; (2)
     40  f018		       85 06		      sta	COLUP0	; (3) set the player 1 sprite colour
     41  f01a
     42  f01a		       a9 50		      lda	#80	; (2) The scan line to start drawing the player 0 graphic
     43  f01c		       85 a1		      sta	p0_y	; (3) Store this scanline into this byte variable
     44  f01e
     45  f01e		       86 80		      stx	player0_x	; (3)
     46  f020		       20 11 f2 	      jsr	pos_x	; (6) set the initial course position of the player 0 graphic by jumping to the bottom
     47  f023
     48  f023							;ldx #%11110000			; (2) set the horizontal movement player 0 (HMP0) register to adjust the position of
     49  f023							;stx HMP0				; (3) the player graphic to the right by 1 color clock (only uses the 4 high bits)
     50  f023
     51  f023
     52  f023
     53  f023
     54  f023
     55  f023
     56  f023
     57  f023
     58  f023
     59  f023
     60  f023							; --------------------------- Begin main loop -------------------------------------
     61  f023
      0  f023				   startframe VERTICAL_SYNC
      1  f023		       a9 0e		      lda	#%1110
      2  f025		       85 02	   .VSLP1     sta	WSYNC
      3  f027		       85 00		      sta	VSYNC
      4  f029		       4a		      lsr
      5  f02a		       d0 f9		      bne	.VSLP1
     63  f02c
     64  f02c							;--37 scanlines of vertical blank (8,436 color clocks, 2,812 machine cycles)-------
     65  f02c							; THIS DOES THE TOP BORDER!!!
     66  f02c		       a9 ff		      lda	#%11111111	; (2) Solid line of pixels
     67  f02e		       85 0d		      sta	PF0	; (3)Set them in all the PF# registers
     68  f030		       85 0e		      sta	PF1	; (3)
     69  f032		       85 0f		      sta	PF2	; (3)
     70  f034
     71  f034		       a2 00		      ldx	#0	; (2)
     72  f036		       a9 00		      lda	#0	; (2)
     73  f038				   lvblank
     74  f038		       85 02		      sta	WSYNC	; (3)
     75  f03a		       e8		      inx		; (2)
     76  f03b		       e0 25		      cpx	#37	; (2) 37 scanlines of vertical blank
     77  f03d		       d0 f9		      bne	lvblank
     78  f03f
     79  f03f		       a9 00		      lda	#0	; (2) Start of new frame
     80  f041		       85 02		      sta	WSYNC	; (3) Needed for HMOVE
     81  f043		       85 01		      sta	VBLANK	; (3) End of vertical blank processing
     82  f045							;sta HMOVE				    ; (3) horizontal move. this will move ALL the player, missle, and ball graphics at the same time
     83  f045							; HMOVE needs to execute during horizontal blanking so it should be done immediatly following
     84  f045							; a WSYNC. Additionally, any of the horizontal movement registers should not be modified within at least
     85  f045							; 24 machine cycles after an HMOVE.
     86  f045
     87  f045							; --------------------------- 192 lines of drawfield ------------------------------
     88  f045
     89  f045		       a2 00		      ldx	#0	; (2)
     90  f047		       a0 00		      ldy	#0	; (2)
     91  f049				   drawfield
     92  f049		       e0 07		      cpx	#BORDERHEIGHT	; (2)
     93  f04b		       10 19		      bpl	borderwalls0	; (3/2) This will be skipped for the first 8 loops to make the top border listed above
     94  f04d		       e0 b9		      cpx	#192-BORDERHEIGHT	; (2) When on scanline 184, it is time to draw the bottom border (Only 8 scanlines left)
     95  f04f		       f0 03		      beq	borderbottom	; (branch=3,skip=2) From scanline 184-192, draw the bottom border
     96  f051		       4c 5c f0 	      jmp	borderdone	; (3) Once this is reached, we'll be able to skip through borderdone and go to "End of screen - enter blanking"
     97  f054
     98  f054				   borderbottom
     99  f054		       a9 ff		      lda	#%11111111	; (2) Solid row of pixels for all PF# registers
    100  f056		       85 0d		      sta	PF0	; (3)
    101  f058		       85 0e		      sta	PF1	; (3)
    102  f05a		       85 0f		      sta	PF2	; (3)
    103  f05c
    104  f05c				   borderdone		;Keeps looping back to the necessary parts of the border of the border that need to be drawn					
    105  f05c		       85 02		      sta	WSYNC	; (3) by tracking which scanline we're currently on
    106  f05e		       e8		      inx		; (2)
    107  f05f		       e0 c0		      cpx	#192	; (2)
    108  f061		       d0 e6		      bne	drawfield	; (3/2)
    109  f063		       4c 61 f1 	      jmp	finish	; (3)
    110  f066
    111  f066				   borderwalls0 		;This series of code draws the desired playfield for 8 scanlines in within a loop, 
    112  f066		       a9 7f		      lda	#%01111111	; (2) and then once out of the loop, the playfield is redifined before being drawn for another 8 scanline loop
    113  f068		       85 0f		      sta	PF2	; (3)
    114  f06a				   borderwalls1
    115  f06a		       85 02		      sta	WSYNC	; (3)
    116  f06c							;lda #%00000000
    117  f06c							;sta HMP0
    118  f06c		       e8		      inx		; (2)
    119  f06d		       e0 10		      cpx	#16	; (2)
    120  f06f		       d0 f9		      bne	borderwalls1	; (3/2) If the code branches, 10/22 horizontal blank machine cycles are used before WSYNC
    121  f071		       a9 1f		      lda	#%00011111	; (2) If the code doesn't branch, 14/22 are used
    122  f073		       85 0f		      sta	PF2	; (3)
    123  f075				   borderwalls2
    124  f075		       85 02		      sta	WSYNC	; (3)
    125  f077		       e8		      inx
    126  f078		       e0 18		      cpx	#24
    127  f07a		       d0 f9		      bne	borderwalls2
    128  f07c		       a9 0f		      lda	#%00001111
    129  f07e		       85 0f		      sta	PF2
    130  f080				   borderwalls3
    131  f080		       85 02		      sta	WSYNC
    132  f082		       e8		      inx
    133  f083		       e0 20		      cpx	#32
    134  f085		       d0 f9		      bne	borderwalls3
    135  f087		       a9 03		      lda	#%00000011
    136  f089		       85 0f		      sta	PF2
    137  f08b				   borderwalls4
    138  f08b		       85 02		      sta	WSYNC
    139  f08d		       e8		      inx
    140  f08e		       e0 28		      cpx	#40
    141  f090		       d0 f9		      bne	borderwalls4
    142  f092		       a9 00		      lda	#%00000000
    143  f094		       85 0f		      sta	PF2
    144  f096				   borderwalls5
    145  f096		       85 02		      sta	WSYNC
    146  f098		       e8		      inx
    147  f099		       e0 30		      cpx	#48
    148  f09b		       d0 f9		      bne	borderwalls5
    149  f09d		       a9 fc		      lda	#%11111100
    150  f09f		       85 0e		      sta	PF1
    151  f0a1				   borderwalls6
    152  f0a1		       85 02		      sta	WSYNC
    153  f0a3		       e8		      inx
    154  f0a4		       e0 38		      cpx	#56
    155  f0a6		       d0 f9		      bne	borderwalls6
    156  f0a8		       a9 f8		      lda	#%11111000
    157  f0aa		       85 0e		      sta	PF1
    158  f0ac				   borderwalls7
    159  f0ac		       85 02		      sta	WSYNC
    160  f0ae		       e8		      inx
    161  f0af		       e0 40		      cpx	#64
    162  f0b1		       d0 f9		      bne	borderwalls7
    163  f0b3		       a9 e0		      lda	#%11100000
    164  f0b5		       85 0e		      sta	PF1
    165  f0b7				   borderwalls8
    166  f0b7		       85 02		      sta	WSYNC
    167  f0b9		       e8		      inx
    168  f0ba		       e0 48		      cpx	#72
    169  f0bc		       d0 f9		      bne	borderwalls8
    170  f0be		       a9 c0		      lda	#%11000000
    171  f0c0		       85 0e		      sta	PF1
    172  f0c2				   borderwalls9
    173  f0c2		       85 02		      sta	WSYNC
    174  f0c4		       e8		      inx
    175  f0c5		       e0 50		      cpx	#80
    176  f0c7		       d0 f9		      bne	borderwalls9
    177  f0c9		       a9 00		      lda	#%00000000
    178  f0cb		       85 0e		      sta	PF1
    179  f0cd				   borderwalls10
    180  f0cd		       85 02		      sta	WSYNC
    181  f0cf		       e8		      inx
    182  f0d0		       e0 58		      cpx	#88
    183  f0d2		       d0 f9		      bne	borderwalls10
    184  f0d4		       a9 30		      lda	#%00110000	; Sets the widest width of the "circle" to be used in loop borderwalls11
    185  f0d6		       85 0d		      sta	PF0
    186  f0d8				   borderwalls11		; The widest segment horizontally of the "circular" playfield
    187  f0d8		       85 02		      sta	WSYNC
    188  f0da		       b9 20 f2 	      lda	player0,y	; (2) Display player0
    189  f0dd		       85 1b		      sta	GRP0	; (3) Write the byte retrieved from the graphics data
    190  f0df		       e8		      inx
    191  f0e0		       c8		      iny
    192  f0e1		       e0 68		      cpx	#104
    193  f0e3		       d0 f3		      bne	borderwalls11
    194  f0e5							;lda #%00000000	 ;Show this off, it's interesting lol
    195  f0e5							;sta PF1		 ;^^^
    196  f0e5		       a9 f0		      lda	#%11110000
    197  f0e7		       85 0d		      sta	PF0
    198  f0e9		       a0 00		      ldy	#0
    199  f0eb		       b9 20 f2 	      lda	player0,y	; (2) Turns off display of the sprite again by retrieving a blank line of player graphics
    200  f0ee		       85 1b		      sta	GRP0	; (3) Write the byte retrieved from the graphics data
    201  f0f0				   borderwalls12
    202  f0f0		       85 02		      sta	WSYNC
    203  f0f2		       a0 00		      ldy	#0
    204  f0f4		       b9 20 f2 	      lda	player0,y	; (2) Turns off display of the sprite again by retrieving a blank line of player graphics
    205  f0f7		       85 1b		      sta	GRP0	; (3) Write the byte retrieved from the graphics data
    206  f0f9		       e8		      inx
    207  f0fa		       e0 70		      cpx	#112
    208  f0fc		       d0 f2		      bne	borderwalls12
    209  f0fe		       a9 c0		      lda	#%11000000
    210  f100		       85 0e		      sta	PF1
    211  f102				   borderwalls13
    212  f102		       85 02		      sta	WSYNC
    213  f104		       e8		      inx
    214  f105		       e0 78		      cpx	#120
    215  f107		       d0 f9		      bne	borderwalls13
    216  f109		       a9 e0		      lda	#%11100000
    217  f10b		       85 0e		      sta	PF1
    218  f10d				   borderwalls14
    219  f10d		       85 02		      sta	WSYNC
    220  f10f		       e8		      inx
    221  f110		       e0 80		      cpx	#128
    222  f112		       d0 f9		      bne	borderwalls14
    223  f114		       a9 f8		      lda	#%11111000
    224  f116		       85 0e		      sta	PF1
    225  f118				   borderwalls15
    226  f118		       85 02		      sta	WSYNC
    227  f11a		       e8		      inx
    228  f11b		       e0 88		      cpx	#136
    229  f11d		       d0 f9		      bne	borderwalls15
    230  f11f		       a9 fc		      lda	#%11111100
    231  f121		       85 0e		      sta	PF1
    232  f123				   borderwalls16
    233  f123		       85 02		      sta	WSYNC
    234  f125		       e8		      inx
    235  f126		       e0 90		      cpx	#144
    236  f128		       d0 f9		      bne	borderwalls16
    237  f12a		       a9 00		      lda	#%00000000
    238  f12c		       85 0f		      sta	PF2
    239  f12e		       a9 ff		      lda	#%11111111
    240  f130		       85 0e		      sta	PF1
    241  f132				   borderwalls17
    242  f132		       85 02		      sta	WSYNC
    243  f134		       e8		      inx
    244  f135		       e0 98		      cpx	#152
    245  f137		       d0 f9		      bne	borderwalls17
    246  f139		       a9 03		      lda	#%00000011
    247  f13b		       85 0f		      sta	PF2
    248  f13d				   borderwalls18
    249  f13d		       85 02		      sta	WSYNC
    250  f13f		       e8		      inx
    251  f140		       e0 a0		      cpx	#160
    252  f142		       d0 f9		      bne	borderwalls18
    253  f144		       a9 0f		      lda	#%00001111
    254  f146		       85 0f		      sta	PF2
    255  f148				   borderwalls19
    256  f148		       85 02		      sta	WSYNC
    257  f14a		       e8		      inx
    258  f14b		       e0 a8		      cpx	#168
    259  f14d		       d0 f9		      bne	borderwalls19
    260  f14f		       a9 1f		      lda	#%00011111
    261  f151		       85 0f		      sta	PF2
    262  f153				   borderwalls20
    263  f153		       85 02		      sta	WSYNC
    264  f155		       e8		      inx
    265  f156		       e0 b0		      cpx	#176
    266  f158		       d0 f9		      bne	borderwalls20
    267  f15a		       a9 7f		      lda	#%01111111
    268  f15c		       85 0f		      sta	PF2
    269  f15e		       4c 5c f0 	      jmp	borderdone	;Jump back up to borderdone once the playfield is complete in order to make the bottomborder				      
    270  f161				   finish
    271  f161
    272  f161							; --------------------------- End of screen - enter blanking ----------------------
    273  f161
    274  f161		       a2 42		      ldx	#%01000010	;Set D1 (start VBLANK), D6 (Enable INPT4, INPT5 latches) of vblank register
    275  f163		       86 01		      stx	VBLANK
    276  f165
    277  f165							; -------------------------- 30 scanlines of overscan -----------------------------
    278  f165
    279  f165		       a2 00		      ldx	#0
    280  f167				   overscan
    281  f167		       85 02		      sta	WSYNC
    282  f169		       e8		      inx
    283  f16a		       e0 1e		      cpx	#30
    284  f16c		       d0 f9		      bne	overscan
    285  f16e
    286  f16e							; --------------------------- End of overscan -------------------------------------
    287  f16e
    288  f16e		       4c 23 f0 	      jmp	startframe	; jump back up to start the next frame
    289  f171
    290  f171							; --------------------------- Pad until end of main segment -----------------------
    291  f171
    292  f171				   Divide15		; The 6502/6507 has neither a multiplication nor a division instruction so here
    293  f171				   .POS       SET	0	; we're building a list of values for divisions of 15 and which course position
    294  f171					      REPEAT	160
    295  f171		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f171				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f171					      REPEND
    295  f172		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f172				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f172					      REPEND
    295  f173		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f173				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f173					      REPEND
    295  f174		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f174				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f174					      REPEND
    295  f175		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f175				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f175					      REPEND
    295  f176		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f176				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f176					      REPEND
    295  f177		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f177				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f177					      REPEND
    295  f178		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f178				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f178					      REPEND
    295  f179		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f179				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f179					      REPEND
    295  f17a		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f17a				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f17a					      REPEND
    295  f17b		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f17b				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f17b					      REPEND
    295  f17c		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f17c				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f17c					      REPEND
    295  f17d		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f17d				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f17d					      REPEND
    295  f17e		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f17e				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f17e					      REPEND
    295  f17f		       01		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f17f				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f17f					      REPEND
    295  f180		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f180				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f180					      REPEND
    295  f181		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f181				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f181					      REPEND
    295  f182		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f182				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f182					      REPEND
    295  f183		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f183				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f183					      REPEND
    295  f184		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f184				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f184					      REPEND
    295  f185		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f185				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f185					      REPEND
    295  f186		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f186				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f186					      REPEND
    295  f187		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f187				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f187					      REPEND
    295  f188		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f188				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f188					      REPEND
    295  f189		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f189				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f189					      REPEND
    295  f18a		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f18a				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f18a					      REPEND
    295  f18b		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f18b				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f18b					      REPEND
    295  f18c		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f18c				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f18c					      REPEND
    295  f18d		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f18d				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f18d					      REPEND
    295  f18e		       02		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f18e				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f18e					      REPEND
    295  f18f		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f18f				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f18f					      REPEND
    295  f190		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f190				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f190					      REPEND
    295  f191		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f191				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f191					      REPEND
    295  f192		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f192				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f192					      REPEND
    295  f193		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f193				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f193					      REPEND
    295  f194		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f194				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f194					      REPEND
    295  f195		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f195				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f195					      REPEND
    295  f196		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f196				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f196					      REPEND
    295  f197		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f197				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f197					      REPEND
    295  f198		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f198				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f198					      REPEND
    295  f199		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f199				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f199					      REPEND
    295  f19a		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f19a				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f19a					      REPEND
    295  f19b		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f19b				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f19b					      REPEND
    295  f19c		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f19c				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f19c					      REPEND
    295  f19d		       03		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f19d				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f19d					      REPEND
    295  f19e		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f19e				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f19e					      REPEND
    295  f19f		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f19f				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f19f					      REPEND
    295  f1a0		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a0				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a0					      REPEND
    295  f1a1		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a1				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a1					      REPEND
    295  f1a2		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a2				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a2					      REPEND
    295  f1a3		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a3				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a3					      REPEND
    295  f1a4		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a4				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a4					      REPEND
    295  f1a5		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a5				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a5					      REPEND
    295  f1a6		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a6				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a6					      REPEND
    295  f1a7		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a7				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a7					      REPEND
    295  f1a8		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a8				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a8					      REPEND
    295  f1a9		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1a9				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1a9					      REPEND
    295  f1aa		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1aa				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1aa					      REPEND
    295  f1ab		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ab				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ab					      REPEND
    295  f1ac		       04		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ac				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ac					      REPEND
    295  f1ad		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ad				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ad					      REPEND
    295  f1ae		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ae				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ae					      REPEND
    295  f1af		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1af				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1af					      REPEND
    295  f1b0		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b0				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b0					      REPEND
    295  f1b1		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b1				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b1					      REPEND
    295  f1b2		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b2				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b2					      REPEND
    295  f1b3		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b3				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b3					      REPEND
    295  f1b4		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b4				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b4					      REPEND
    295  f1b5		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b5				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b5					      REPEND
    295  f1b6		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b6				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b6					      REPEND
    295  f1b7		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b7				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b7					      REPEND
    295  f1b8		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b8				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b8					      REPEND
    295  f1b9		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1b9				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1b9					      REPEND
    295  f1ba		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ba				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ba					      REPEND
    295  f1bb		       05		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1bb				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1bb					      REPEND
    295  f1bc		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1bc				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1bc					      REPEND
    295  f1bd		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1bd				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1bd					      REPEND
    295  f1be		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1be				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1be					      REPEND
    295  f1bf		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1bf				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1bf					      REPEND
    295  f1c0		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c0				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c0					      REPEND
    295  f1c1		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c1				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c1					      REPEND
    295  f1c2		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c2				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c2					      REPEND
    295  f1c3		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c3				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c3					      REPEND
    295  f1c4		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c4				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c4					      REPEND
    295  f1c5		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c5				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c5					      REPEND
    295  f1c6		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c6				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c6					      REPEND
    295  f1c7		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c7				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c7					      REPEND
    295  f1c8		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c8				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c8					      REPEND
    295  f1c9		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1c9				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1c9					      REPEND
    295  f1ca		       06		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ca				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ca					      REPEND
    295  f1cb		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1cb				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1cb					      REPEND
    295  f1cc		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1cc				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1cc					      REPEND
    295  f1cd		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1cd				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1cd					      REPEND
    295  f1ce		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ce				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ce					      REPEND
    295  f1cf		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1cf				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1cf					      REPEND
    295  f1d0		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d0				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d0					      REPEND
    295  f1d1		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d1				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d1					      REPEND
    295  f1d2		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d2				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d2					      REPEND
    295  f1d3		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d3				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d3					      REPEND
    295  f1d4		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d4				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d4					      REPEND
    295  f1d5		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d5				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d5					      REPEND
    295  f1d6		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d6				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d6					      REPEND
    295  f1d7		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d7				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d7					      REPEND
    295  f1d8		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d8				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d8					      REPEND
    295  f1d9		       07		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1d9				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1d9					      REPEND
    295  f1da		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1da				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1da					      REPEND
    295  f1db		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1db				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1db					      REPEND
    295  f1dc		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1dc				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1dc					      REPEND
    295  f1dd		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1dd				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1dd					      REPEND
    295  f1de		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1de				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1de					      REPEND
    295  f1df		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1df				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1df					      REPEND
    295  f1e0		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e0				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e0					      REPEND
    295  f1e1		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e1				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e1					      REPEND
    295  f1e2		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e2				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e2					      REPEND
    295  f1e3		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e3				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e3					      REPEND
    295  f1e4		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e4				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e4					      REPEND
    295  f1e5		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e5				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e5					      REPEND
    295  f1e6		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e6				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e6					      REPEND
    295  f1e7		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e7				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e7					      REPEND
    295  f1e8		       08		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e8				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e8					      REPEND
    295  f1e9		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1e9				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1e9					      REPEND
    295  f1ea		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ea				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ea					      REPEND
    295  f1eb		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1eb				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1eb					      REPEND
    295  f1ec		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ec				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ec					      REPEND
    295  f1ed		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ed				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ed					      REPEND
    295  f1ee		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ee				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ee					      REPEND
    295  f1ef		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ef				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ef					      REPEND
    295  f1f0		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f0				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f0					      REPEND
    295  f1f1		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f1				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f1					      REPEND
    295  f1f2		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f2				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f2					      REPEND
    295  f1f3		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f3				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f3					      REPEND
    295  f1f4		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f4				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f4					      REPEND
    295  f1f5		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f5				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f5					      REPEND
    295  f1f6		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f6				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f6					      REPEND
    295  f1f7		       09		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f7				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f7					      REPEND
    295  f1f8		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f8				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f8					      REPEND
    295  f1f9		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1f9				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1f9					      REPEND
    295  f1fa		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1fa				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1fa					      REPEND
    295  f1fb		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1fb				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1fb					      REPEND
    295  f1fc		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1fc				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1fc					      REPEND
    295  f1fd		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1fd				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1fd					      REPEND
    295  f1fe		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1fe				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1fe					      REPEND
    295  f1ff		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f1ff				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f1ff					      REPEND
    295  f200		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f200				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f200					      REPEND
    295  f201		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f201				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f201					      REPEND
    295  f202		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f202				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f202					      REPEND
    295  f203		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f203				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f203					      REPEND
    295  f204		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f204				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f204					      REPEND
    295  f205		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f205				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f205					      REPEND
    295  f206		       0a		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f206				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f206					      REPEND
    295  f207		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f207				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f207					      REPEND
    295  f208		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f208				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f208					      REPEND
    295  f209		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f209				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f209					      REPEND
    295  f20a		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f20a				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f20a					      REPEND
    295  f20b		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f20b				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f20b					      REPEND
    295  f20c		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f20c				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f20c					      REPEND
    295  f20d		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f20d				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f20d					      REPEND
    295  f20e		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f20e				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f20e					      REPEND
    295  f20f		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f20f				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    294  f20f					      REPEND
    295  f210		       0b		      .byte.b	(.POS / 15) + 1	; To the best of my understanding, this creates a table of the 15 color cycle apart locations
    296  f210				   .POS       SET	.POS + 1	; on the screen where we can set the course position. 
    297  f211					      REPEND
    298  f211
    299  f211				   pos_x		; (3) subroutine to position the sprite, the x register is currently holding 0 (?).
    300  f211		       bd 71 f1 	      lda	Divide15,x	; (2) load the value location at the xth byte in the Divide15 table
    301  f214		       aa		      tax		; (2) Transfer the accumulator to the x register
    302  f215		       85 02		      sta	WSYNC
    303  f217
    304  f217							; ---- this loop takes 5 machine cycles each iteration, that's 15 color clocks.
    305  f217
    306  f217		       a2 08		      ldx	#8
    307  f219				   SimpleLoop
    308  f219		       ca		      dex		; (2) decrement x
    309  f21a		       d0 fd		      bne	SimpleLoop	; (2/3) branch if not equal
      0  f21c					      SLEEP	2
      1  f21c				   .CYCLES    SET	2
      2  f21c
      3  f21c				  -	      IF	.CYCLES < 2
      4  f21c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21c				  -	      ERR
      6  f21c					      ENDIF
      7  f21c
      8  f21c				  -	      IF	.CYCLES & 1
      9  f21c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21c				  -	      nop	0
     11  f21c				  -	      ELSE
     12  f21c				  -	      bit	VSYNC
     13  f21c				  -	      ENDIF
     14  f21c				  -.CYCLES    SET	.CYCLES - 3
     15  f21c					      ENDIF
     16  f21c
     17  f21c					      REPEAT	.CYCLES / 2
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    311  f21d		       85 10		      sta	RESP0	; (3) strobe the RESP0 register to set the course position
    312  f21f		       60		      rts		; (6) return to caller
    313  f220
    314  f220		       00	   player0    .byte.b	%00000000
    315  f221		       08		      .byte.b	%00001000
    316  f222		       36		      .byte.b	%00110110
    317  f223		       63		      .byte.b	%01100011	; Bitmap, one byte per line
    318  f224		       41		      .byte.b	%01000001
    319  f225		       01		      .byte.b	%00000001
    320  f226		       01		      .byte.b	%00000001
    321  f227		       01		      .byte.b	%00000001
    322  f228		       01		      .byte.b	%00000001
    323  f229		       00		      .byte.b	%00000000
    324  f22a		       00		      .byte.b	%00000000
    325  f22b		       00		      .byte.b	%00000000
    326  f22c		       00		      .byte.b	%00000000
    327  f22d		       00		      .byte.b	%00000000
    328  f22e		       00		      .byte.b	%00000000
    329  f22f
    330  f22f
    331  f22f
    332  f22f
    333  f22f
    334  f22f
    335  f22f
    336  f22f
    337  fffa					      org	$FFFA
    338  fffa
    339  fffa				   irqvectors
    340  fffa		       00 f0		      .word.w	reset	; NMI
    341  fffc		       00 f0		      .word.w	reset	; RESET
    342  fffe		       00 f0		      .word.w	reset	; IRQ
    343  10000
    344  10000							; -------------------------- End of main segment ----------------------------------
